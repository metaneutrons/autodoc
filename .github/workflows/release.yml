name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: false
        type: string
      use_gitversion:
        description: 'Use GitVersion for automatic versioning'
        required: false
        type: boolean
        default: true

env:
  CARGO_TERM_COLOR: always

jobs:
  version:
    name: Determine Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      crates_version: ${{ steps.version.outputs.crates_version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Install GitVersion
      if: inputs.use_gitversion == true
      uses: gittools/actions/gitversion/setup@v0.10.2
      with:
        versionSpec: '5.x'
    
    - name: Determine Version with GitVersion
      if: inputs.use_gitversion == true
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.10.2
    
    - name: Set Version
      id: version
      run: |
        if [ "${{ inputs.use_gitversion }}" == "true" ]; then
          VERSION="${{ steps.gitversion.outputs.semVer }}"
          CRATES_VERSION="${{ steps.gitversion.outputs.majorMinorPatch }}"
          TAG="v$VERSION"
        elif [ -n "${{ inputs.version }}" ]; then
          TAG="${{ inputs.version }}"
          VERSION="${TAG#v}"
          CRATES_VERSION="$VERSION"
        else
          TAG="${GITHUB_REF#refs/tags/}"
          VERSION="${TAG#v}"
          CRATES_VERSION="$VERSION"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "crates_version=$CRATES_VERSION" >> $GITHUB_OUTPUT
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        echo "Crates Version: $CRATES_VERSION"
        echo "Tag: $TAG"

  build:
    name: Build
    needs: version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: docpilot-linux-x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: docpilot-windows-x64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact: docpilot-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact: docpilot-macos-arm64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libfontconfig1-dev
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.target }}
    
    - name: Build
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Prepare artifact
      shell: bash
      run: |
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          cp target/${{ matrix.target }}/release/docpilot.exe ${{ matrix.artifact }}
        else
          cp target/${{ matrix.target }}/release/docpilot ${{ matrix.artifact }}
        fi
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}
        path: ${{ matrix.artifact }}

  release:
    name: Create Release
    needs: [version, build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.version.outputs.tag }}
        name: docPilot ${{ needs.version.outputs.version }}
        draft: false
        prerelease: false
        generate_release_notes: true
        files: |
          docpilot-linux-x64/docpilot-linux-x64
          docpilot-windows-x64.exe/docpilot-windows-x64.exe
          docpilot-macos-x64/docpilot-macos-x64
          docpilot-macos-arm64/docpilot-macos-arm64
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    name: Publish to crates.io
    needs: [version, build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - name: Update Cargo.toml version
      run: |
        sed -i 's/^version = ".*"/version = "${{ needs.version.outputs.crates_version }}"/' Cargo.toml
        echo "Updated Cargo.toml version to ${{ needs.version.outputs.crates_version }}"
        grep "^version" Cargo.toml
    - name: Publish to crates.io
      run: cargo publish
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  update-homebrew:
    name: Update Homebrew formula
    needs: [version, release]
    runs-on: ubuntu-latest
    steps:
    - name: Download macOS assets
      run: |
        curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -o docpilot-macos-x64 \
          "https://github.com/${{ github.repository }}/releases/download/${{ needs.version.outputs.tag }}/docpilot-macos-x64"
        
        curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -o docpilot-macos-arm64 \
          "https://github.com/${{ github.repository }}/releases/download/${{ needs.version.outputs.tag }}/docpilot-macos-arm64"
    
    - name: Calculate checksums
      id: checksums
      run: |
        MACOS_X64_SHA=$(sha256sum docpilot-macos-x64 | cut -d' ' -f1)
        MACOS_ARM64_SHA=$(sha256sum docpilot-macos-arm64 | cut -d' ' -f1)
        echo "macos_x64_sha=${MACOS_X64_SHA}" >> $GITHUB_OUTPUT
        echo "macos_arm64_sha=${MACOS_ARM64_SHA}" >> $GITHUB_OUTPUT
    
    - name: Update Homebrew formula
      if: env.HOMEBREW_UPDATE_TOKEN != ''
      uses: peter-evans/repository-dispatch@v3.0.0
      with:
        token: ${{ secrets.HOMEBREW_UPDATE_TOKEN }}
        repository: metaneutrons/homebrew-tap
        event-type: update-formula
        client-payload: |
          {
            "formula": "docpilot",
            "version": "${{ needs.version.outputs.tag }}",
            "macos_x64_sha": "${{ steps.checksums.outputs.macos_x64_sha }}",
            "macos_arm64_sha": "${{ steps.checksums.outputs.macos_arm64_sha }}"
          }
      env:
        HOMEBREW_UPDATE_TOKEN: ${{ secrets.HOMEBREW_UPDATE_TOKEN }}
